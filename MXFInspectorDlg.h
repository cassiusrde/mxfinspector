// MXFInspectorDlg.h : header file
//

#pragma once
#include "afxcmn.h"
#include "afxwin.h"

#include <vector>

#include "SplitterControl.h"
#include "hexeditbase.h"

#include "MXFTypes.h"


///* SMPTE RP224 http://www.smpte-ra.org/mdd/index.html */
//static const MXFDataDefinitionUL mxf_data_definition_uls[] = {
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x01,0x00,0x00,0x00 }, CODEC_TYPE_VIDEO },
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x01,0x03,0x02,0x02,0x02,0x00,0x00,0x00 }, CODEC_TYPE_AUDIO },
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x05,0x01,0x03,0x02,0x02,0x02,0x02,0x00,0x00 }, CODEC_TYPE_AUDIO },
//	{ { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },  CODEC_TYPE_DATA },
//};
//
//static const MXFCodecUL mxf_codec_uls[] = {
//	/* PictureEssenceCoding */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x02,0x02,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* 422P@ML I-Frame */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x04,0x02,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* 422P@HL I-Frame */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x04,0x03,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* 422P@HL Long GoP */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x01,0x11,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* MP@ML Long GoP */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x02,0x03,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* 422P@ML Long GoP */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x03,0x03,0x00 }, CODEC_ID_MPEG2VIDEO, Frame }, /* MP@HL Long GoP */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x20,0x02,0x03 },      CODEC_ID_MPEG4, Frame }, /* XDCAM proxy_pal030926.mxf */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x03,0x04,0x01,0x02,0x02,0x01,0x20,0x02,0x04 },      CODEC_ID_MPEG4, Frame }, /* XDCAM Proxy C0023S01.mxf */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x01,0x02,0x01,0x05 }, CODEC_ID_MPEG2VIDEO, Frame }, /* D-10 30Mbps PAL */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x01,0x02,0x01,0x01 }, CODEC_ID_MPEG2VIDEO, Frame }, /* D-10 50Mbps PAL */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x02,0x02,0x04,0x00 },    CODEC_ID_DVVIDEO, Frame }, /* DVCPRO50 PAL */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x02,0x02,0x02,0x00 },    CODEC_ID_DVVIDEO, Frame }, /* DVCPRO25 PAL */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x02,0x02,0x01,0x02,0x00 },    CODEC_ID_DVVIDEO, Frame }, /* DV25 IEC PAL */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x07,0x04,0x01,0x02,0x02,0x03,0x01,0x01,0x00 },   CODEC_ID_JPEG2000, Frame }, /* JPEG2000 Codestream */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x01,0x02,0x01,0x7F,0x00,0x00,0x00 },   CODEC_ID_RAWVIDEO, Frame }, /* Uncompressed */
//	/* SoundEssenceCompression */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x01,0x00,0x00,0x00,0x00 },  CODEC_ID_PCM_S16LE, Frame }, /* Uncompressed */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x01,0x7F,0x00,0x00,0x00 },  CODEC_ID_PCM_S16LE, Frame },
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x07,0x04,0x02,0x02,0x01,0x7E,0x00,0x00,0x00 },  CODEC_ID_PCM_S16BE, Frame }, /* From Omneon MXF file */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x02,0x03,0x01,0x01,0x00 },   CODEC_ID_PCM_ALAW, Frame },
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x04,0x04,0x02,0x02,0x02,0x03,0x01,0x01,0x00 },   CODEC_ID_PCM_ALAW, Frame }, /* XDCAM Proxy C0023S01.mxf */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x02,0x03,0x02,0x01,0x00 },        CODEC_ID_AC3, Frame },
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x02,0x03,0x02,0x05,0x00 },        CODEC_ID_MP2, Frame }, /* MP2 or MP3 */
//	//{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x04,0x02,0x02,0x02,0x03,0x02,0x1C,0x00 },    CODEC_ID_DOLBY_E, Frame }, /* Dolby-E */
//	{ { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },       CODEC_ID_NONE, Frame },
//};
//
//static const MXFCodecUL mxf_picture_essence_container_uls[] = {
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x02,0x0D,0x01,0x03,0x01,0x02,0x04,0x60,0x01 }, CODEC_ID_MPEG2VIDEO, Frame }, /* MPEG-ES Frame wrapped */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x02,0x0D,0x01,0x03,0x01,0x02,0x04,0xe0,0x02 }, CODEC_ID_MPEG2VIDEO,  Clip }, /* MPEG-ES Clip wrapped, 0xe0 MPV stream id */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x0D,0x01,0x03,0x01,0x02,0x04,0x61,0x07 }, CODEC_ID_MPEG2VIDEO,  Clip }, /* MPEG-ES Custom wrapped, 0x61 ??? stream id */
//	{ { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },       CODEC_ID_NONE, Frame },
//};
//
//static const MXFCodecUL mxf_sound_essence_container_uls[] = {
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x0D,0x01,0x03,0x01,0x02,0x06,0x01,0x00 },  CODEC_ID_PCM_S16LE, Frame }, /* BWF Frame wrapped */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x0D,0x01,0x03,0x01,0x02,0x06,0x03,0x00 },  CODEC_ID_PCM_S16LE, Frame }, /* AES Frame wrapped */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x02,0x0D,0x01,0x03,0x01,0x02,0x04,0x40,0x01 },        CODEC_ID_MP2, Frame }, /* MPEG-ES Frame wrapped, 0x40 ??? stream id */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x02,0x0D,0x01,0x03,0x01,0x02,0x04,0xc0,0x01 },        CODEC_ID_MP2, Frame }, /* MPEG-ES Frame wrapped, 0xc0 MPA stream id */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x02,0x0D,0x01,0x03,0x01,0x02,0x04,0xc0,0x02 },        CODEC_ID_MP2,  Clip }, /* MPEG-ES Clip wrapped, 0xc0 MPA stream id */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x0D,0x01,0x03,0x01,0x02,0x01,0x05,0x01 },  CODEC_ID_PCM_S16BE, Frame }, /* D-10 Mapping 30Mbps PAL Extended Template */
//	{ { 0x06,0x0E,0x2B,0x34,0x04,0x01,0x01,0x01,0x0D,0x01,0x03,0x01,0x02,0x01,0x01,0x01 },  CODEC_ID_PCM_S16BE, Frame }, /* D-10 Mapping 50Mbps PAL Extended Template */
//	{ { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },       CODEC_ID_NONE, Frame },
//};


enum MXFAudioType
{
	PCM_AUDIO,	
	AES3_AUDIO
};

struct MyItemList{
	unsigned __int64 offset;
	CString node;
	unsigned char  key[16];
	DWORD length;
	CString info;

	MyItemList():offset(0), node(""), length(0), info(""){};

	MyItemList(unsigned __int64 o, CString n, unsigned char k[16], DWORD l, CString i):
	offset(o), node(n), length(l), info(i){
		memcpy(key, k, 16);
	};
};

// CMXFInspectorDlg dialog
class CMXFInspectorDlg : public CDialog
{
// Construction
public:
	CMXFInspectorDlg(CWnd* pParent = NULL);	// standard constructor

// Dialog Data
	enum { IDD = IDD_MXFINSPECTOR_DIALOG };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV support
	LRESULT DefWindowProc(UINT message, WPARAM wParam, LPARAM lParam);


// Implementation
protected:
	HICON m_hIcon;
	CSplitterControl m_wndSplitter;

	// Generated message map functions
	virtual BOOL OnInitDialog();
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	afx_msg void OnDropFiles(HDROP hDropInfo);
	afx_msg void OnSize(UINT nType, int cx, int cy);	
	afx_msg void OnNmItemclickList(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnNMDblclkList(NMHDR *pNMHDR, LRESULT *pResult);
	afx_msg void OnNMDblclkTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnDestroy();	
	DECLARE_MESSAGE_MAP()

	static unsigned long threadProc(CMXFInspectorDlg* pDlg);

	void DoResize(int delta);

public:
	CTreeCtrl		m_treeCtrl;
	CListCtrl		m_listCtrl;		
	CHexEditBase	m_editHex;
	CProgressCtrl	m_progressCtrl;

	CString			m_fnameMXF;
	
	CRect			m_lastSize;
	CString			m_title;

	PrimerPack	m_primerPack;

	HANDLE		m_threadHnd;

	MXFAudioType	m_audioType;

	std::vector<MyItemList> m_list;

private:
	BOOL ShowEntry(unsigned __int64 offset);

	BOOL DumpMXF(CString fnameMXF);
	BOOL DumpEntry(unsigned __int64 offset);

	BOOL DumpMXFPartitionPack(PartitionPack& pack, HTREEITEM root);
	BOOL DumpMXFPrimerPack(PrimerPack& pp, HTREEITEM root);	
	BOOL DumpMXFSystemMetadataPack(SystemMetadataPack& smp, HTREEITEM root);
	BOOL DumpMXFIndexTable(IndexTableSegment& its, HTREEITEM root);
	BOOL DumpMXFRandomIndexPack(RandomIndexPack& rip, HTREEITEM root);

	void DumpMXFPreface(Preface& p, HTREEITEM root);
	void DumpMXFIdentification(Identification& id, HTREEITEM root);
	void DumpMXFContentStorage(ContentStorage& cs, HTREEITEM root);
	void DumpMXFDMSegment(DMSegment& dms, HTREEITEM root);
	void DumpMXFEssenceContainerData(EssenceContainerData& ecd, HTREEITEM root);
	void DumpMXFGenericPackage(GenericPackage& gp, HTREEITEM root);
	void DumpMXFTrack(Track& t, HTREEITEM root);
	void DumpMXFStaticTrack(StaticTrack& t, HTREEITEM root);
	void DumpMXFMetadataSourceClip(SourceClip& clip, HTREEITEM root);
	void DumpMXFMetadataSequence(Sequence& seq, HTREEITEM root);
	void DumpMXFMetadataTimecodeComponent(TimecodeComponent tc, HTREEITEM root);
	void DumpMXFSourcePackage(SourcePackage& sp, HTREEITEM root);
	void DumpMXFFileDescriptor(FileDescriptor& fd, HTREEITEM root);
	void DumpMXFMultipleDescriptor(MultipleDescriptor& md, HTREEITEM root);
	void DumpMXFGenericPictureEssenceDescriptor(GenericPictureEssenceDescriptor& gped, HTREEITEM root);
	void DumpMXFCDCIPictureEssenceDescriptor(CDCIPictureEssenceDescriptor& cped, HTREEITEM root);
	void DumpMXFGenericSoundEssenceDescriptor(GenericSoundEssenceDescriptor& gsed, HTREEITEM root);	
	void DumpMXFMPEG2VideoDescriptor(MPEG2VideoDescriptor& vd, HTREEITEM root);
	void DumpMXFWaveAudioEssenceDescriptor(WaveAudioEssenceDescriptor& wd, HTREEITEM root);
	void DumpMXFAES3AudioEssenceDescriptor(AES3AudioEssenceDescriptor& ad, HTREEITEM root);
	
	
	void InsertEntry(unsigned __int64 offset, CString node, unsigned char key[16], DWORD length, CString info, bool save = true);	
	void FindEntry(unsigned __int64 offset);
public:
	afx_msg void OnFileExportdump();
	afx_msg void OnFileExportvideo();
	afx_msg void OnFileExportaudio();
	afx_msg void OnFilterPack();
	afx_msg void OnFilterPicture();
	afx_msg void OnFilterSound();
	afx_msg void OnFilterMetadata();
	afx_msg void OnFilterIndextable();
	afx_msg void OnFilterShowAll();	


	afx_msg void OnGoto();
	afx_msg void OnFind();
	afx_msg void OnSave();	
};
